

🐍 Importing and Exporting Data in Python with Pandas

---

📚 Table of Contents

1. [💡 Step 1: Understanding Data Acquisition](#-step-1-understanding-data-acquisition)
2. [📁 Step 2: File Formats and Paths](#-step-2-file-formats-and-paths)
3. [🚗 Step 3: Reading a Dataset Example](#-step-3-reading-a-dataset-example)
4. [🏷️ Step 4: Adding Column Names](#️-step-4-adding-column-names)
5. [🔍 Step 5: Previewing the Data](#-step-5-previewing-the-data)
6. [💾 Step 6: Exporting Data from Pandas](#-step-6-exporting-data-from-pandas)
7. [🌍 Bonus Tip: Other File Formats](#-bonus-tip-other-file-formats)
8. [✨ Wrapping Up](#-wrapping-up)

---

💡 Step 1: Understanding Data Acquisition

Before we start coding, let’s clarify what *data acquisition* means.

It’s the process of **loading data from different sources** — like files, databases, or URLs — into your Python environment.

When using Pandas, two things matter most when reading data:

* **Format** → how the data is stored (CSV, JSON, Excel, etc.)
* **File path** → where the data lives (local file or online link)

---
📁 Step 2: File Formats and Paths

The **format** tells Pandas what kind of file it’s dealing with — you can usually tell from the extension (`.csv`, `.xlsx`, `.json`, etc.).

The **path** tells Pandas *where* to find the file — either locally like:

```python
data = pd.read_csv("data/laptops.csv")
```

or online:

```python
data = pd.read_csv("https://example.com/data.csv")
```

---
🚗 Step 3: Reading a Dataset Example

Let’s use a real-world dataset of laptop pricing retrieved from a web address.

```python
import pandas as pd

file_path = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-Coursera/laptop_pricing_dataset_base.csv"
df = pd.read_csv(file_path, header=None)
```

💥 Boom — you’ve just imported your first dataset!

By default, `read_csv()` assumes your file has headers.
If it doesn’t, you can set `header=None` and Pandas will assign integer column names (`0, 1, 2, ...`).

---

🏷️ Step 4: Adding Column Names

You can assign more descriptive headers using a list:

```python
headers = [
    "Manufacturer", "Category", "Screen", "GPU", "OS",
    "CPU_core", "Screen_Size_inch", "CPU_frequency",
    "RAM_GB", "Storage_GB_SSD", "Weight_kg", "Price"
]

df.columns = headers
print(df.head(10))
```

Now your DataFrame is much easier to read and interpret!

---

🔍 Step 5: Previewing the Data

Always inspect your dataset after loading it. Instead of printing the entire DataFrame, use:

```python
df.head()   # Shows the first 5 rows
df.tail()   # Shows the last 5 rows
```

---

💾 Step 6: Exporting Data from Pandas

Once you’ve cleaned or transformed your data, you’ll likely want to save it.
Exporting data in Pandas is as easy as importing it.

```python
df.to_csv("laptops_cleaned.csv", index=False)
```

The `index=False` option prevents Pandas from saving the row indices in your file.

---

🌍 Bonus Tip: Other File Formats

Pandas supports a wide range of file formats — and the syntax is almost identical across them:

```python
df.to_excel("output.xlsx", index=False)   # Excel
df.to_json("output.json")                 # JSON
df.to_hdf("output.h5", key="df")          # HDF5
```

---

✨ Wrapping Up

Now you know how to:

✅ Import data from local or remote sources
✅ Assign and manage column headers
✅ Preview datasets efficiently
✅ Export results to multiple formats

So next time you come across a messy CSV or Excel file, you’ll know exactly what to do.

Happy coding! 🐍✨


